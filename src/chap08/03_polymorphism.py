# ***다형성(Polymorphism)

class ArmorSuite:
    def armor(self):
        print('armored')

class IronMan(ArmorSuite):
    pass

def get_armored(suite): #독립적인 함수 정의 => 매개변수 하나 정의
    suite.armor() #입력으로 전달받은 매개변수의 메소드를 호출해주도록 코드 작성

if __name__ == '__main__':
    suite = ArmorSuite()
    get_armored(suite) #ArmorSuite의 객체가 전달될 것이고 그 안에 있는 메소드가 호출될 것임

    iron_main = IronMan() #자식의 인스턴스를 생성
    get_armored(iron_main)
    #파이썬이라는 언어에서는 자바보다는 다형성이라는 개념이 눈에 확 들어오지 않음 -> 인스턴스를 생성 요청을 할 때 부모 자료형을 따로 작성해주지 않기 때문이다.
    #그렇지만 함수를 호출하면서 자식의 객체를 전달하더라도 상속의 관계이기 때문에 부모의 메소드 호출이 가능해진다. 그래서 동일한 결과를 확인할 수 있다!!
    #파이썬에서는 다형성이라는 개념이 자바만큼 명확하게 구분지어지면서 다양하게 접근할 수 있는 개념은 배제될 수 있다는 것이고, (오히려 제약 범위가 파이썬이 더 크다는 것)
    #함수가 정의 되어져 있을 때 입력으로 전달받은 객체가 부모의 자료형이든 자식의 자료형이든 전달받을 수 있다.
    #대신에 이 안에 정의된 기능은 다형성을 고려하면서 부모나 자식 개념들을 잘 파악해두고 호출을 해야 오류없이 사용을 할 수 있는 것이다.