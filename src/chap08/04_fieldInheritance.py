class A:
    def __init__(self):
        print("A 생성자 호출()")
        self.message = "Hello"

#상속에 관계하에서는 자식클래스가 가지는 의무가 있었음 -> 자식이 부모의 필드를 초기화해야할 의무 (자바에서는 의무를 지키지 않을 때 에러가 났었음)
#A라는 클래스에는 message라는 필드가 하나 정의되어져 있음.
#A단독으로 인스턴스를 생성할 때 생성자 호출이 되어지면서 메모리가 할당이 되어질 것임.
#상속에 관계하에서는 자식이 인스턴스를 생성하면 크기만 계산하여 메모리를 할당할 뿐이지 부모의 생성자와 메소드 호출에 대한 액션이 취해지지 않음
#단지 내 생성자를 호출하고 끝날 뿐이다. 그러다 보니 자바에서 보면 자식의 생성자에서는 부모 생성자를 반드시 호출해줘야 하는 의무를 가지고 있었음.
# ==> 파이썬도 동일한 스킴을 가져간다.

class B(A):
    def __init__(self):
        A.__init__(self)  # 부모클래스이름.을 통해 생성자함수를 호출해주면 되는 것이다. +) 생성자 메소드의 매개변수에도 명시적으로 self를 넣어줘야 함
        # 상속에 관계하에서 부모의 생성자를 호출하는 방법이 되는 것이다. (부모의 클래스에서 필드가 하나라도 정의되어져 있을 경우에 의무임)
        # 일반적으로 코드를 작성할 때 상속에 관계하에 필드가 하나라도 부모에서 정의가 되어져 있으면 부모클래스.__init__()을 기억해야 한다.
        print("B 생성자 호출()")
       

if __name__ == '__main__':
    obj = B()

    print(obj.message)
