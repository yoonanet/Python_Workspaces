# 다중 상속시 주의 사항 - 죽음의 다이아몬드 (자바는 지원하지 않는 개념)
# 다중 상속: 클래스를 정의하고 상속을 받는데 하나의 클래스가 아닌 동시에 두 개 이상의 클래스를 정의할 수 있도록 제공해주고 있는 개념을 말한다.
# 가급적 다중 상속의 구조는 사용하지 않는 방향으로 프로젝트의 구조를 만들어가는 것이 일반적이다.

class A:
    def method(self):
        print("A")

class B(A):
    def method(self):
        print("B")

class C(A):
    def method(self):
        print("C")

class D(B, C):
    pass
#위에 상속된 구조는 다이아몬드의 구조를 띔.

if __name__ == '__main__':
    obj = D() #상속을 받는 구조로 부모의 메모리를 할당하게 될 것이다. : D -> B -> A 메모리 할당 -> B 메모리 할당 --> C -> A(이미 할당됨) -> C 메모리 할당 -> D 메모리 할당

    #현재 메소드들을 오버라이딩해주고 있음!! -> 이때 메소드는 누가 호출될 것인가?
    #A를 상속하고 있기 때문에 B와 C중에서 호출될 것이다. 결과적으로는 B가 호출됨

    # B가 호출 -> B가 먼저 위치하고 있으니까 이 메소드를 먼저 호출될 것이라고 주장
    # C가 호출 -> 통상 제일 나중에 위치하는 C를 호출하는 것이 헷갈리지 않을 것이라고 주장
    # ==> 누구 말이 맞을 것인가? 정답이 있을 것인가?
    # 파이썬은 B가 호출됨. 먼저 상속을 하고 있기 때문에 오버라이딩된 메소드를 호출하도록 한 것이다.
    # 즉, 파이썬은 먼저 상속을 받은 클래스에 메소드를 호출함!! (우선 순위에 따른 호출이기 때문에 타 프로그래밍 언어는 다를 수 있음)
    # 자바같은 경우 사람들마다 기준이 다르기 때문에 호출이 어떻게 되어져야 할지 모호하기 때문에 지원하지 않는 것이다!!
    obj.method()